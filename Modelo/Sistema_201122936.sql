-- MySQL Script generated by MySQL Workbench
-- 06/09/15 23:18:46
-- Model: ALMACEN    Version: 1.0
-- MySQL Workbench Forward Engineering


-- -----------------------------------------------------------------------------MODELO RELACIONAL--------------------------------------------------------------

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema Almacen
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `Almacen` ;

-- -----------------------------------------------------
-- Schema Almacen
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Almacen` ;
USE `Almacen` ;

-- -----------------------------------------------------
-- Table `Almacen`.`Producto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Producto` (
  `idProducto` INT NOT NULL,
  `nombre` VARCHAR(60) NOT NULL,
  `descripcion` TEXT(200) NULL,
  `imagen` TEXT(150) NULL,
  `estado` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`idProducto`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idProducto_UNIQUE` ON `Almacen`.`Producto` (`idProducto` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Cliente`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Cliente` (
  `nit` VARCHAR(20) NULL,
  `nombre` VARCHAR(60) NULL,
  `direccion` VARCHAR(100) NULL,
  `telefono` INT NULL,
  `estado` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`nit`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `nit_UNIQUE` ON `Almacen`.`Cliente` (`nit` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Proveedor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Proveedor` (
  `nitProveedor` VARCHAR(20) NOT NULL,
  `nombre` VARCHAR(60) NOT NULL,
  `direccion` VARCHAR(100) NULL,
  `telefono` INT NULL,
  `email` VARCHAR(60) NULL,
  `estado` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`nitProveedor`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `nitProveedor_UNIQUE` ON `Almacen`.`Proveedor` (`nitProveedor` ASC);

CREATE UNIQUE INDEX `nombre_UNIQUE` ON `Almacen`.`Proveedor` (`nombre` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Empleado`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Empleado` (
  `dpi` BIGINT NOT NULL,
  `nombre` VARCHAR(60) NOT NULL,
  `direccion` VARCHAR(100) NOT NULL,
  `telefono` INT NULL,
  `estado` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`dpi`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `dpi_UNIQUE` ON `Almacen`.`Empleado` (`dpi` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Venta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Venta` (
  `idFactura` INT NOT NULL AUTO_INCREMENT,
  `fecha` DATETIME NULL,
  `descripcion` TEXT(200) NULL,
  `total` REAL NOT NULL DEFAULT 0,
  `Vendedor_dpi` BIGINT NOT NULL,
  `Cliente_nit` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`idFactura`),
  CONSTRAINT `fk_Venta_Vendedor1`
    FOREIGN KEY (`Vendedor_dpi`)
    REFERENCES `Almacen`.`Empleado` (`dpi`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Venta_Cliente1`
    FOREIGN KEY (`Cliente_nit`)
    REFERENCES `Almacen`.`Cliente` (`nit`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idVenta_UNIQUE` ON `Almacen`.`Venta` (`idFactura` ASC);

CREATE INDEX `fk_Venta_Vendedor1_idx` ON `Almacen`.`Venta` (`Vendedor_dpi` ASC);

CREATE INDEX `fk_Venta_Cliente1_idx` ON `Almacen`.`Venta` (`Cliente_nit` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Detalle_Venta`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Detalle_Venta` (
  `idDetalle_Venta` INT NOT NULL AUTO_INCREMENT,
  `precioUnitario` REAL NOT NULL,
  `cantidad` INT NOT NULL,
  `Venta_idFactura` INT NOT NULL,
  `Producto_idProducto` INT NOT NULL,
  PRIMARY KEY (`idDetalle_Venta`, `Venta_idFactura`),
  CONSTRAINT `fk_Detalle_Venta_Venta`
    FOREIGN KEY (`Venta_idFactura`)
    REFERENCES `Almacen`.`Venta` (`idFactura`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Detalle_Venta_Producto1`
    FOREIGN KEY (`Producto_idProducto`)
    REFERENCES `Almacen`.`Producto` (`idProducto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Detalle_Venta_Venta_idx` ON `Almacen`.`Detalle_Venta` (`Venta_idFactura` ASC);

CREATE INDEX `fk_Detalle_Venta_Producto1_idx` ON `Almacen`.`Detalle_Venta` (`Producto_idProducto` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Compra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Compra` (
  `idFactura` INT NOT NULL AUTO_INCREMENT,
  `fecha` DATE NULL,
  `descripcion` TEXT(200) NULL,
  `total` REAL NOT NULL DEFAULT 0,
  `Proveedor_nitProveedor` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`idFactura`),
  CONSTRAINT `fk_Compra_Proveedor1`
    FOREIGN KEY (`Proveedor_nitProveedor`)
    REFERENCES `Almacen`.`Proveedor` (`nitProveedor`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `idCompra_UNIQUE` ON `Almacen`.`Compra` (`idFactura` ASC);

CREATE INDEX `fk_Compra_Proveedor1_idx` ON `Almacen`.`Compra` (`Proveedor_nitProveedor` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Detalle_Compra`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Detalle_Compra` (
  `idDetalle_Compra` INT NOT NULL AUTO_INCREMENT,
  `precioUnitario` REAL NOT NULL DEFAULT 0,
  `cantidad` INT NOT NULL DEFAULT 0,
  `Compra_idFactura` INT NOT NULL,
  `Producto_idProducto` INT NOT NULL,
  PRIMARY KEY (`idDetalle_Compra`, `Compra_idFactura`),
  CONSTRAINT `fk_Detalle_Compra_Compra1`
    FOREIGN KEY (`Compra_idFactura`)
    REFERENCES `Almacen`.`Compra` (`idFactura`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Detalle_Compra_Producto1`
    FOREIGN KEY (`Producto_idProducto`)
    REFERENCES `Almacen`.`Producto` (`idProducto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Detalle_Compra_Compra1_idx` ON `Almacen`.`Detalle_Compra` (`Compra_idFactura` ASC);

CREATE INDEX `fk_Detalle_Compra_Producto1_idx` ON `Almacen`.`Detalle_Compra` (`Producto_idProducto` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Merma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Merma` (
  `idMerma` INT NOT NULL AUTO_INCREMENT,
  `cantidadUnidades` INT NOT NULL DEFAULT 0,
  `justificacion` TEXT(200) NOT NULL,
  `valorPerdida` REAL NOT NULL DEFAULT 0,
  `fecha` DATE NULL,
  `Producto_idProducto` INT NOT NULL,
  PRIMARY KEY (`idMerma`),
  CONSTRAINT `fk_Merma_Producto1`
    FOREIGN KEY (`Producto_idProducto`)
    REFERENCES `Almacen`.`Producto` (`idProducto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE INDEX `fk_Merma_Producto1_idx` ON `Almacen`.`Merma` (`Producto_idProducto` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Tipo_Gasto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Tipo_Gasto` (
  `idTipo_Gasto` INT NOT NULL,
  `nombre` VARCHAR(60) NOT NULL,
  `descripcion` TEXT(200) NULL,
  PRIMARY KEY (`idTipo_Gasto`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `dpi_UNIQUE` ON `Almacen`.`Tipo_Gasto` (`idTipo_Gasto` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Gasto`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Gasto` (
  `idGasto` INT NOT NULL,
  `fecha` DATE NOT NULL,
  `monto` REAL NOT NULL,
  `Tipo_Gasto_idTipo_Gasto` INT NOT NULL,
  `Empleado_dpi` BIGINT NOT NULL,
  PRIMARY KEY (`idGasto`),
  CONSTRAINT `fk_Gasto_Tipo_Gasto1`
    FOREIGN KEY (`Tipo_Gasto_idTipo_Gasto`)
    REFERENCES `Almacen`.`Tipo_Gasto` (`idTipo_Gasto`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Gasto_Empleado1`
    FOREIGN KEY (`Empleado_dpi`)
    REFERENCES `Almacen`.`Empleado` (`dpi`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

CREATE UNIQUE INDEX `dpi_UNIQUE` ON `Almacen`.`Gasto` (`idGasto` ASC);

CREATE INDEX `fk_Gasto_Tipo_Gasto1_idx` ON `Almacen`.`Gasto` (`Tipo_Gasto_idTipo_Gasto` ASC);

CREATE INDEX `fk_Gasto_Empleado1_idx` ON `Almacen`.`Gasto` (`Empleado_dpi` ASC);


-- -----------------------------------------------------
-- Table `Almacen`.`Usuario`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Almacen`.`Usuario` (
  `nickName` VARCHAR(50) NOT NULL,
  `password` VARCHAR(20) NOT NULL,
  `email` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`nickName`))
ENGINE = InnoDB;

CREATE UNIQUE INDEX `nickName_UNIQUE` ON `Almacen`.`Usuario` (`nickName` ASC);


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


-- -----------------------------------------------------------------------------FIN MODELO RELACIONAL--------------------------------------------------------------

DELIMITER $
-- ---------------------------------------------------------------------------FUNCIONES------------------------------------------------------
DROP FUNCTION IF EXISTS COMPROBARLOGIN;$

CREATE FUNCTION COMPROBARLOGIN(NICK VARCHAR(50),PASS VARCHAR(20)) RETURNS VARCHAR(200)
BEGIN
	DECLARE RESULTADO VARCHAR(200);
	SELECT COUNT(*) INTO RESULTADO FROM USUARIO WHERE NICKNAME = NICK AND PASSWORD = PASS;
    IF(RESULTADO>0) THEN
		SET RESULTADO = CONCAT('USUARIO ',NICK,', LOGEADO');
	ELSE
		SET RESULTADO = CONCAT('USUARIO: ',NICK,', NO VALIDO');
    END IF;
    RETURN RESULTADO;
END;$

DROP FUNCTION IF EXISTS EXISTEUSUARIO;$

CREATE FUNCTION EXISTEUSUARIO(NICK VARCHAR(50)) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM USUARIO WHERE NICKNAME = NICK;
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTECLIENTE;$

CREATE FUNCTION EXISTECLIENTE(NITR VARCHAR(20)) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM CLIENTE WHERE NIT = NITR;
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTEPROVEEDOR;$

CREATE FUNCTION EXISTEPROVEEDOR(NITPROVEEDORR VARCHAR(20)) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM PROVEEDOR WHERE NITPROVEEDOR = NITPROVEEDORR;
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTEEMPLEADO;$

CREATE FUNCTION EXISTEEMPLEADO(DPIR BIGINT) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM EMPLEADO WHERE DPI = DPIR;
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTEPRODUCTO;$

CREATE FUNCTION EXISTEPRODUCTO(IDPRODUCTOR INT) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM PRODUCTO WHERE IDPRODUCTO = IDPRODUCTOR;
	
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTECOMPRA;$

CREATE FUNCTION EXISTECOMPRA(IDFACTURAR INT) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM COMPRA WHERE IDFACTURA = IDFACTURAR;
	
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTEDETALLECOMPRA;$

CREATE FUNCTION EXISTEDETALLECOMPRA(IDDETALLECOMPRAR INT,IDFACTURACOMPRAR INT) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM DETALLE_COMPRA WHERE IDDETALLE_COMPRA = IDDETALLECOMPRAR AND COMPRA_IDFACTURA = IDFACTURACOMPRAR;
	
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTEVENTA;$

CREATE FUNCTION EXISTEVENTA(IDFACTURAR INT) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM VENTA WHERE IDFACTURA = IDFACTURAR;
	
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTEDETALLEVENTA;$

CREATE FUNCTION EXISTEDETALLEVENTA(IDDETALLEVENTAR INT,IDFACTURAVENTAR INT) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM DETALLE_VENTA WHERE IDDETALLE_VENTA = IDDETALLEVENTAR AND VENTA_IDFACTURA = IDFACTURAVENTAR;
	
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$



DROP FUNCTION IF EXISTS EXISTEMERMA;$

CREATE FUNCTION EXISTEMERMA(IDMERMAR INT) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM MERMA WHERE IDMERMA = IDMERMAR;
	
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTETIPOGASTO;$

CREATE FUNCTION EXISTETIPOGASTO(IDTIPOGASTOR INT) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM TIPO_GASTO WHERE IDTIPO_GASTO = IDTIPOGASTOR;
	
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$


DROP FUNCTION IF EXISTS EXISTEGASTO;$

CREATE FUNCTION EXISTEGASTO(IDGASTOR INT) RETURNS INT
BEGIN
	DECLARE RESULTADO INT DEFAULT 0;
	SELECT COUNT(*) INTO RESULTADO FROM GASTO WHERE IDGASTO = IDGASTOR;
	
    IF(RESULTADO>0) THEN
		SET RESULTADO = 1;
    END IF;
    RETURN RESULTADO;
END;$
-- ---------------------------------------------------------------------------FIN FUNCIONES------------------------------------------------------

-- ---------------------------------------------------------------------------PROCEDIMIENTOS ALMACENADOS------------------------------------------------------
DROP PROCEDURE IF EXISTS INSERTARUSUARIO;$

CREATE PROCEDURE INSERTARUSUARIO(IN NICK VARCHAR(50),IN PASS VARCHAR(20),IN EMAILR VARCHAR(60))
BEGIN
	DECLARE EXISTE INT DEFAULT 1;
	DECLARE MENSAJE VARCHAR(100); 
    
    SET EXISTE = EXISTEUSUARIO(NICK);
	IF (EXISTE=0) THEN
		INSERT INTO USUARIO VALUES(NICK,PASS,EMAILR);
        SET MENSAJE = CONCAT('INGRESO NUEVO USUARIO: ',NICK);
    ELSE
		SET MENSAJE = CONCAT('NO INSERTO EL USUARIO: ',NICK,', YA EXISTE UNO');
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS ELIMINARUSUARIO;$

CREATE PROCEDURE ELIMINARUSUARIO(IN NICK VARCHAR(50))
BEGIN
	DECLARE EXISTE INT DEFAULT 0;
	DECLARE MENSAJE VARCHAR(100); 
    
    SET EXISTE = EXISTEUSUARIO(NICK);
	IF (EXISTE=0) THEN
        SET MENSAJE = CONCAT('USUARIO: ',NICK,', NO EXISTE');
    ELSE
		DELETE FROM USUARIO WHERE NICKNAME = NICK;
		SET MENSAJE = CONCAT('USUARIO: ',NICK,', ELIMINADO');
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROCLIENTE;$

CREATE PROCEDURE REGISTROCLIENTE(IN NITR VARCHAR(20), IN NOMBRER VARCHAR(60), IN DIRECCIONR VARCHAR(100),IN TELEFONOR INT,IN ACCIONR VARCHAR(3))
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTECLIENTE(NITR);
    
    IF (ACCIONR='100') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM CLIENTE WHERE NIT = NITR;
            IF (ESTADOR=0) THEN
				UPDATE CLIENTE SET NOMBRE = NOMBRER, DIRECCION = DIRECCIONR, TELEFONO = TELEFONOR, ESTADO = 1 WHERE NIT = NITR;
                SET MENSAJE = CONCAT('INGRESO CLIENTE: ',NITR,'->',NOMBRER);
            ELSE
				SET MENSAJE = CONCAT('NO INGRESO CLIENTE: ',NITR,', YA ESTA REGISTRADO');
            END IF;
        ELSE
			INSERT INTO CLIENTE VALUES(NITR,NOMBRER,DIRECCIONR,TELEFONOR,1);
			SET MENSAJE = CONCAT('INGRESO CLIENTE: ',NITR,'->',NOMBRER);
        END IF;
    ELSEIF (ACCIONR='010') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM CLIENTE WHERE NIT = NITR;
            IF (ESTADOR=0) THEN
				SET MENSAJE = CONCAT('NO MODIFICO CLIENTE: ',NITR,', REGISTRO ELIMINADO');
            ELSE
				UPDATE CLIENTE SET NOMBRE = NOMBRER, DIRECCION = DIRECCIONR, TELEFONO = TELEFONOR WHERE NIT = NITR;
				SET MENSAJE = CONCAT('SE MODIFICO CLIENTE: ',NITR,'->',NOMBRER);
            END IF;
        ELSE
			INSERT INTO CLIENTE VALUES(NITR,NOMBRER,DIRECCIONR,TELEFONOR,1);
			SET MENSAJE = CONCAT('INGRESO CLIENTE: ',NITR,'->',NOMBRER,', EN MODIFICACION');
        END IF;
    ELSEIF	(ACCIONR='001') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM CLIENTE WHERE NIT = NITR;
            IF (ESTADOR=0) THEN
				SET MENSAJE = CONCAT('NO ELIMINO CLIENTE: ',NITR,', YA FUE ELIMINADO');
            ELSE
				UPDATE CLIENTE SET ESTADO = 0 WHERE NIT = NITR;
				SET MENSAJE = CONCAT('SE ELIMINO CLIENTE: ',NITR);
            END IF;
        ELSE
			SET MENSAJE = CONCAT('NO ELIMINO CLIENTE: ',NITR,',  PORQUE NO EXISTE');
        END IF;
    ELSE
		SET MENSAJE = CONCAT('ACCION NO VALIDA');
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROPROVEEDOR;$

CREATE PROCEDURE REGISTROPROVEEDOR(IN NITPROVEEDORR VARCHAR(20), IN NOMBRER VARCHAR(60), IN DIRECCIONR VARCHAR(100),IN TELEFONOR INT,IN EMAILR VARCHAR(60),IN ACCIONR VARCHAR(3))
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTEPROVEEDOR(NITPROVEEDORR);
    
    IF (ACCIONR='100') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM PROVEEDOR WHERE NITPROVEEDOR = NITPROVEEDORR;
            IF (ESTADOR=0) THEN
				UPDATE PROVEEDOR SET NOMBRE = NOMBRER, DIRECCION = DIRECCIONR, TELEFONO = TELEFONOR, EMAIL = EMAILR, ESTADO = 1 WHERE NITPROVEEDOR = NITPROVEEDORR;
                SET MENSAJE = CONCAT('INGRESO PROVEEDOR: ',NITPROVEEDORR,'->',NOMBRER);
            ELSE
				SET MENSAJE = CONCAT('NO INGRESO PROVEEDOR: ',NITPROVEEDORR,' YA ESTA REGISTRADO');
            END IF;
        ELSE
			INSERT INTO PROVEEDOR VALUES(NITPROVEEDORR,NOMBRER,DIRECCIONR,TELEFONOR,EMAILR,1);
			SET MENSAJE = CONCAT('INGRESO PROVEEDOR: ',NITPROVEEDORR,'->',NOMBRER);
        END IF;
    ELSEIF (ACCIONR='010') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM PROVEEDOR WHERE NITPROVEEDOR = NITPROVEEDORR;
            IF (ESTADOR=0) THEN
				SET MENSAJE = CONCAT('NO MODIFICO PROVEEDOR: ',NITPROVEEDORR,', REGISTRO ELIMINADO');
            ELSE
				UPDATE PROVEEDOR SET NOMBRE = NOMBRER, DIRECCION = DIRECCIONR, TELEFONO = TELEFONOR, EMAIL = EMAILR WHERE NITPROVEEDOR = NITPROVEEDORR;
				SET MENSAJE = CONCAT('SE MODIFICO PROVEEDOR: ',NITPROVEEDORR,'->',NOMBRER);
            END IF;
        ELSE
			INSERT INTO PROVEEDOR VALUES(NITPROVEEDORR,NOMBRER,DIRECCIONR,TELEFONOR,EMAILR,1);
			SET MENSAJE = CONCAT('INGRESO PROVEEDOR: ',NITPROVEEDORR,'->',NOMBRER,', EN MODIFICACION');
        END IF;
    ELSEIF	(ACCIONR='001') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM PROVEEDOR WHERE NITPROVEEDOR = NITPROVEEDORR;
            IF (ESTADOR=0) THEN
				SET MENSAJE = CONCAT('NO ELIMINO PROVEEDOR: ',NITPROVEEDORR,', YA FUE ELIMINADO');
            ELSE
				UPDATE PROVEEDOR SET ESTADO = 0 WHERE NITPROVEEDOR = NITPROVEEDORR;
				SET MENSAJE = CONCAT('SE ELIMINO PROVEEDOR: ',NITPROVEEDORR);
            END IF;
        ELSE
			SET MENSAJE = CONCAT('NO ELIMINO PROVEEDOR: ',NITPROVEEDORR,', PORQUE NO EXISTE');
        END IF;
    ELSE
		SET MENSAJE = CONCAT('ACCION NO VALIDA');
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROEMPLEADO;$

CREATE PROCEDURE REGISTROEMPLEADO(IN DPIR BIGINT, IN NOMBRER VARCHAR(60), IN DIRECCIONR VARCHAR(100),IN TELEFONOR INT,IN ACCIONR VARCHAR(3))
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTEEMPLEADO(DPIR);
    
    IF (ACCIONR='100') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM EMPLEADO WHERE DPI = DPIR;
            IF (ESTADOR=0) THEN
				UPDATE EMPLEADO SET NOMBRE = NOMBRER, DIRECCION = DIRECCIONR, TELEFONO = TELEFONOR, ESTADO = 1 WHERE DPI = DPIR;
                SET MENSAJE = CONCAT('INGRESO EMPLEADO: ',DPIR,'->',NOMBRER);
            ELSE
				SET MENSAJE = CONCAT('NO INGRESO EMPLEADO: ',DPIR,', YA ESTA REGISTRADO');
            END IF;
        ELSE
			INSERT INTO EMPLEADO VALUES(DPIR,NOMBRER,DIRECCIONR,TELEFONOR,1);
			SET MENSAJE = CONCAT('INGRESO EMPLEADO: ',DPIR,'->',NOMBRER);
        END IF;
    ELSEIF (ACCIONR='010') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM EMPLEADO WHERE DPI = DPIR;
            IF (ESTADOR=0) THEN
				SET MENSAJE = CONCAT('NO MODIFICO EMPLEADO: ',DPIR,', REGISTRO ELIMINADO');
            ELSE
				UPDATE EMPLEADO SET NOMBRE = NOMBRER, DIRECCION = DIRECCIONR, TELEFONO = TELEFONOR WHERE DPI = DPIR;
				SET MENSAJE = CONCAT('SE MODIFICO EMPLEADO: ',DPIR,'->',NOMBRER);
            END IF;
        ELSE
			INSERT INTO EMPLEADO VALUES(DPIR,NOMBRER,DIRECCIONR,TELEFONOR,1);
			SET MENSAJE = CONCAT('INGRESO EMPLEADO: ',DPIR,'->',NOMBRER,', EN MODIFICACION');
        END IF;
    ELSEIF	(ACCIONR='001') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM EMPLEADO WHERE DPI = DPIR;
            IF (ESTADOR=0) THEN
				SET MENSAJE = CONCAT('NO ELIMINO EMPLEADO: ',DPIR,', YA FUE ELIMINADO');
            ELSE
				UPDATE EMPLEADO SET ESTADO = 0 WHERE DPI = DPIR;
				SET MENSAJE = CONCAT('SE ELIMINO EMPLEADO: ',DPIR);
            END IF;
        ELSE
			SET MENSAJE = CONCAT('NO ELIMINO EMPLEADO',DPIR,', PORQUE NO EXISTE');
        END IF;
    ELSE
		SET MENSAJE = CONCAT('ACCION NO VALIDA');
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROPRODUCTO;$

CREATE PROCEDURE REGISTROPRODUCTO(IN IDPRODUCTOR INT, IN NOMBRER VARCHAR(60), IN DESCRIPCIONR TEXT(200),IN IMAGENR TEXT(100),IN ACCIONR VARCHAR(3))
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTEPRODUCTO(IDPRODUCTOR);
    
    IF (ACCIONR='100') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM PRODUCTO WHERE IDPRODUCTO = IDPRODUCTOR;
            IF (ESTADOR=0) THEN
				UPDATE PRODUCTO SET NOMBRE = NOMBRER, DESCRIPCION = DESCRIPCIONR, IMAGEN = IMAGENR, ESTADO = 1 WHERE IDPRODUCTO = IDPRODUCTOR;
                SET MENSAJE = CONCAT('INGRESO PRODUCTO: ',IDPRODUCTOR,'->',NOMBRER);
            ELSE
				SET MENSAJE = CONCAT('NO INGRESO PRODUCTO: ',IDPRODUCTOR,', YA ESTA REGISTRADO');
            END IF;
        ELSE
			INSERT INTO PRODUCTO VALUES(IDPRODUCTOR,NOMBRER,DESCRIPCIONR,IMAGENR,1);
			SET MENSAJE = CONCAT('INGRESO PRODUCTO: ',IDPRODUCTOR,'->',NOMBRER);
        END IF;
    ELSEIF (ACCIONR='010') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM PRODUCTO WHERE IDPRODUCTO = IDPRODUCTOR;
            IF (ESTADOR=0) THEN
				SET MENSAJE = CONCAT('NO MODIFICO PRODUCTO: ',IDPRODUCTOR,', REGISTRO FUE ELIMINADO');
            ELSE
				UPDATE PRODUCTO SET NOMBRE = NOMBRER, DESCRIPCION = DESCRIPCIONR, IMAGEN = IMAGENR WHERE IDPRODUCTO = IDPRODUCTOR;
				SET MENSAJE = CONCAT('SE MODIFICO PRODUCTO: ',IDPRODUCTOR,'->',NOMBRER);
            END IF;
        ELSE
			INSERT INTO PRODUCTO VALUES(IDPRODUCTOR,NOMBRER,DESCRIPCIONR,IMAGENR,1);
			SET MENSAJE = CONCAT('INGRESO PRODUCTO: ',IDPRODUCTOR,'->',NOMBRER,', EN MODIFICACION');
        END IF;
    ELSEIF	(ACCIONR='001') THEN
		IF (EXISTER = 1)THEN
			SELECT ESTADO INTO ESTADOR FROM PRODUCTO WHERE IDPRODUCTO = IDPRODUCTOR;
            IF (ESTADOR=0) THEN
				SET MENSAJE = CONCAT('NO ELIMINO PRODUCTO: ',IDPRODUCTOR,', YA FUE ELIMINADO');
            ELSE
				UPDATE PRODUCTO SET ESTADO = 0 WHERE IDPRODUCTO = IDPRODUCTOR;
				SET MENSAJE = CONCAT('SE ELIMINO PRODUCTO: ',IDPRODUCTOR);
            END IF;
        ELSE
			SET MENSAJE = CONCAT('NO ELIMINO PRODUCTO: ',IDPRODUCTOR,', PORQUE NO EXISTE');
        END IF;
    ELSE
		SET MENSAJE = CONCAT('ACCION NO VALIDA');
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROCOMPRA;$

CREATE PROCEDURE REGISTROCOMPRA(IN IDFACTURAR INT, IN FECHAR DATE, IN DESCRIPCIONR TEXT(200),IN NITPROVEEDORR VARCHAR(20))
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTECOMPRA(IDFACTURAR);
    
   	IF (EXISTER = 1)THEN
		SET MENSAJE = CONCAT('NO INGRESO COMPRA: ',IDFACTURAR,' YA ESTA REGISTRADA');
    ELSE
		INSERT INTO COMPRA VALUES(IDFACTURAR,FECHAR,DESCRIPCIONR,0,NITPROVEEDORR);
		SET MENSAJE = CONCAT('INGRESO COMPRA: ',IDFACTURAR);
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTRODETALLECOMPRA;$

CREATE PROCEDURE REGISTRODETALLECOMPRA(IN IDDETALLECOMPRAR INT, IN PRECIOR REAL, IN CANTIDADR INT,IN IDFACTURACOMPRAR INT,IN IDPRODUCTOR INT )
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTEDETALLECOMPRA(IDDETALLECOMPRAR,IDFACTURACOMPRAR);
    
	IF (EXISTER = 1)THEN
		SET MENSAJE = CONCAT('NO INGRESO DETALLE DE COMPRA: ',IDDETALLECOMPRAR,' EN FACTURA: ',IDFACTURACOMPRAR,' YA ESTA REGISTRADO');
	ELSE
		INSERT INTO DETALLE_COMPRA VALUES(IDDETALLECOMPRAR,PRECIOR,CANTIDADR,IDFACTURACOMPRAR,IDPRODUCTOR);
		SET MENSAJE = CONCAT('INGRESO DETALLE DE COMPRA: ',IDDETALLECOMPRAR,' EN FACTURA: ',IDFACTURACOMPRAR);
	END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROVENTA;$

CREATE PROCEDURE REGISTROVENTA(IN IDFACTURAR INT, IN FECHAR DATETIME, IN DESCRIPCIONR TEXT(200), IN DPIVENDEDORR BIGINT,IN NITCLIENTER VARCHAR(20))
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTEVENTA(IDFACTURAR);
    
   	IF (EXISTER = 1)THEN
		SET MENSAJE = CONCAT('NO INGRESO VENTA: ',IDFACTURAR,' YA ESTA REGISTRADA');
    ELSE
		INSERT INTO VENTA VALUES(IDFACTURAR,FECHAR,DESCRIPCIONR,0,DPIVENDEDORR,NITCLIENTER);
		SET MENSAJE = CONCAT('INGRESO VENTA: ',IDFACTURAR);
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTRODETALLEVENTA;$

CREATE PROCEDURE REGISTRODETALLEVENTA(IN IDDETALLEVENTAR INT, IN PRECIOR REAL, IN CANTIDADR INT,IN IDFACTURAVENTAR INT,IN IDPRODUCTOR INT )
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTEDETALLEVENTA(IDDETALLEVENTAR,IDFACTURAVENTAR);
    
	IF (EXISTER = 1)THEN
		SET MENSAJE = CONCAT('NO INGRESO DETALLE DE VENTA: ',IDDETALLEVENTAR,' EN FACTURA: ',IDFACTURAVENTAR,' YA ESTA REGISTRADO');
	ELSE
		INSERT INTO DETALLE_VENTA VALUES(IDDETALLEVENTAR,PRECIOR,CANTIDADR,IDFACTURAVENTAR,IDPRODUCTOR);
		SET MENSAJE = CONCAT('INGRESO DETALLE DE VENTA: ',IDDETALLEVENTAR,' EN FACTURA: ',IDFACTURAVENTAR);
	END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROMERMA;$

CREATE PROCEDURE REGISTROMERMA(IN IDMERMAR INT, IN CANTIDADUNIDADESR INT, IN JUSTIFICACIONR TEXT(200), IN VALORPERDIDAR REAL,IN FECHAR DATE,IN IDPRODUCTOR INT)
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTEMERMA(IDMERMAR);
    
   	IF (EXISTER = 1)THEN
		SET MENSAJE = CONCAT('NO INGRESO MERMA: ',IDMERMAR,' YA ESTA REGISTRADA');
    ELSE
		INSERT INTO MERMA VALUES(IDMERMAR,CANTIDADUNIDADESR,JUSTIFICACIONR,VALORPERDIDAR,FECHAR,IDPRODUCTOR);
		SET MENSAJE = CONCAT('INGRESO MERMA: ',IDMERMAR,' FECHA->',FECHAR);
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROTIPOGASTO;$

CREATE PROCEDURE REGISTROTIPOGASTO(IN IDTIPOGASTOR INT, IN NOMBRER VARCHAR(60), IN DESCRIPCIONR TEXT(200))
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTETIPOGASTO(IDTIPOGASTOR);
    
   	IF (EXISTER = 1)THEN
		SET MENSAJE = CONCAT('NO INGRESO TIPO GASTO, CODIGO: ',IDTIPOGASTOR,', YA ESTA REGISTRADO');
    ELSE
		INSERT INTO TIPO_GASTO VALUES(IDTIPOGASTOR,NOMBRER,DESCRIPCIONR);
		SET MENSAJE = CONCAT('INGRESO TIPO DE GASTO: ',IDTIPOGASTOR,'->',NOMBRER);
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROGASTO;$

CREATE PROCEDURE REGISTROGASTO(IN IDGASTOR INT, IN FECHAR DATE, IN MONTOR REAL,IN IDTIPOGASTOR INT,IN DPIEMPLEADOR BIGINT)
BEGIN
	DECLARE EXISTER INT;
	DECLARE MENSAJE VARCHAR(100); 
    DECLARE ESTADOR INT;
    
    SET EXISTER = EXISTEGASTO(IDGASTOR);
    
   	IF (EXISTER = 1)THEN
		SET MENSAJE = CONCAT('NO INGRESO GASTO: ',IDGASTOR,', YA ESTA REGISTRADO');
    ELSE
		INSERT INTO GASTO VALUES(IDGASTOR,FECHAR,MONTOR,IDTIPOGASTOR,DPIEMPLEADOR);
		SET MENSAJE = CONCAT('INGRESO GASTO: ',IDGASTOR,' FECHA->',FECHAR);
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTRO;$

CREATE PROCEDURE REGISTRO(IN IDR INT, IN OPCIONR INT)
BEGIN
	DECLARE MENSAJE VARCHAR(800); 
	IF (OPCIONR = 1111)THEN
		SET MENSAJE = (SELECT concat('(',IDPRODUCTO,',',NOMBRE,',',DESCRIPCION,',',IMAGEN,')')  FROM PRODUCTO WHERE IDPRODUCTO = IDR AND ESTADO=1);
    ELSEIF (OPCIONR = 1110)THEN
		SET MENSAJE = (SELECT concat('(',DPI,',',NOMBRE,',',DIRECCION,',',TELEFONO,')')  FROM EMPLEADO WHERE DPI = IDR AND ESTADO=1);
	ELSEIF (OPCIONR = 1011)THEN -- NOMBRE DE TIPO DE GASTO
		SET MENSAJE = (SELECT NOMBRE FROM TIPO_GASTO WHERE IDTIPO_GASTO = IDR);
	ELSEIF (OPCIONR = 1010)THEN -- NOMBRE DE EMPLEADO
		SET MENSAJE = (SELECT NOMBRE FROM EMPLEADO WHERE DPI = IDR);
	ELSEIF (OPCIONR = 1001)THEN -- NOMBRE DE PRODUCTO
		SET MENSAJE = (SELECT NOMBRE FROM PRODUCTO WHERE IDPRODUCTO = IDR);
	ELSE
		SET MENSAJE = NULL;
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS REGISTROVARCHAR;$

CREATE PROCEDURE REGISTROVARCHAR(IN RECIBIDO VARCHAR(200), IN OPCIONR INT)
BEGIN
	DECLARE MENSAJE VARCHAR(800); 
	IF (OPCIONR = 1000)THEN -- CODIGO DE PRODUCTO
		SET MENSAJE = (SELECT IDPRODUCTO FROM PRODUCTO WHERE NOMBRE = RECIBIDO);
	ELSEIF (OPCIONR = 1101)THEN
		SET MENSAJE = (SELECT concat('(',NITPROVEEDOR,',',NOMBRE,',',DIRECCION,',',TELEFONO,',',EMAIL,')')  FROM PROVEEDOR WHERE NITPROVEEDOR = RECIBIDO AND ESTADO=1);
	ELSEIF (OPCIONR = 1100)THEN
		SET MENSAJE = (SELECT concat('(',NIT,',',NOMBRE,',',DIRECCION,',',TELEFONO,')')  FROM CLIENTE WHERE NIT = RECIBIDO AND ESTADO=1);
	ELSEIF (OPCIONR = 111)THEN -- NOMBRE DE CLIENTE
		SET MENSAJE = (SELECT NOMBRE FROM CLIENTE WHERE NIT = RECIBIDO);
	ELSEIF (OPCIONR = 110)THEN -- DPI DE EMPLEADO
		SET MENSAJE = (SELECT DPI FROM EMPLEADO WHERE NOMBRE = RECIBIDO);
	ELSEIF (OPCIONR = 101)THEN -- NOMBRE DE PROVEEDOR
		SET MENSAJE = (SELECT NOMBRE FROM PROVEEDOR WHERE NITPROVEEDOR = RECIBIDO);
	ELSEIF (OPCIONR = 100)THEN -- NIT DE CLIENTE
		SET MENSAJE = (SELECT NIT FROM CLIENTE WHERE NOMBRE = RECIBIDO);
	ELSEIF (OPCIONR = 11)THEN -- NIT DE PROVEEDOR
		SET MENSAJE = (SELECT NITPROVEEDOR FROM PROVEEDOR WHERE NOMBRE = RECIBIDO);
	ELSE
		SET MENSAJE = NULL;
    END IF;
    SELECT MENSAJE FROM DUAL;
END;$


DROP PROCEDURE IF EXISTS LISTAREGISTROS;$

CREATE PROCEDURE LISTAREGISTROS(IN OPCIONR INT)
BEGIN
	IF (OPCIONR = 0)THEN
		SELECT DPI FROM EMPLEADO WHERE ESTADO = 1;
    ELSEIF (OPCIONR = 1)THEN
		SELECT IDTIPO_GASTO FROM TIPO_GASTO;
	ELSEIF (OPCIONR = 10)THEN
		SELECT IDPRODUCTO FROM PRODUCTO WHERE ESTADO = 1;
	ELSEIF (OPCIONR = 11)THEN
		SELECT NOMBRE FROM PRODUCTO WHERE ESTADO = 1;
	ELSEIF (OPCIONR = 100)THEN
		SELECT NIT FROM CLIENTE WHERE ESTADO = 1;
	ELSEIF (OPCIONR = 101)THEN
		SELECT NOMBRE FROM EMPLEADO WHERE ESTADO = 1;
	ELSEIF (OPCIONR = 110)THEN
		SELECT NITPROVEEDOR FROM PROVEEDOR WHERE ESTADO = 1;
	ELSEIF (OPCIONR = 111)THEN
		SELECT NICKNAME FROM USUARIO;
	ELSEIF (OPCIONR = 1000)THEN
		SELECT NOMBRE FROM CLIENTE	WHERE ESTADO = 1;
	ELSEIF (OPCIONR = 1001)THEN
		SELECT NOMBRE FROM PROVEEDOR WHERE ESTADO = 1;
    END IF;
END;$



-- ---------------------------------------------------------------------------FIN PROCEDIMIENTOS ALMACENADOS------------------------------------------------------


-- ---------------------------------------------------------------------------TRIGGERS------------------------------------------------------
DROP TRIGGER IF EXISTS DISPARODETALLEVENTA;$

CREATE TRIGGER DISPARODETALLEVENTA 
	AFTER INSERT ON DETALLE_VENTA FOR EACH ROW 
	BEGIN 
		UPDATE VENTA SET TOTAL = TOTAL + (NEW.PRECIOUNITARIO * NEW.CANTIDAD) WHERE IDFACTURA = NEW.VENTA_IDFACTURA;
END;$


DROP TRIGGER IF EXISTS DISPARODETALLECOMPRA;$

CREATE TRIGGER DISPARODETALLECOMPRA
	AFTER INSERT ON DETALLE_COMPRA FOR EACH ROW 
	BEGIN 
		UPDATE COMPRA SET TOTAL = TOTAL + (NEW.PRECIOUNITARIO * NEW.CANTIDAD) WHERE IDFACTURA = NEW.COMPRA_IDFACTURA;
END;$
-- ---------------------------------------------------------------------------FIN TRIGGERS------------------------------------------------------


-- ---------------------------------------------------------------------------VISTAS------------------------------------------------------
DROP VIEW IF EXISTS REPORTEMEJORESVENDEDORES;$

CREATE VIEW REPORTEMEJORESVENDEDORES AS 
SELECT ROUND(SUM(V.TOTAL),2) AS TOTAL,(SELECT NOMBRE FROM EMPLEADO WHERE DPI = V.VENDEDOR_DPI) AS VENDEDOR 
FROM VENTA V
GROUP BY V.VENDEDOR_DPI
ORDER BY TOTAL ASC
LIMIT 10;$



DROP VIEW IF EXISTS REPORTEVENTASPORDIA;$

CREATE VIEW REPORTEVENTASPORDIA AS 
select 'DOMINGO' AS DIA,COUNT(*) AS NO_VENTAS FROM VENTA  WHERE DAYOFWEEK(FECHA) = 1 
UNION
select 'LUNES' AS DIA,COUNT(*) AS NO_VENTAS FROM VENTA  WHERE DAYOFWEEK(FECHA) = 2 
UNION
select 'MARTES' AS DIA,COUNT(*) AS NO_VENTAS FROM VENTA  WHERE DAYOFWEEK(FECHA) = 3
UNION
select 'MIERCOLES' AS DIA,COUNT(*) AS NO_VENTAS FROM VENTA  WHERE DAYOFWEEK(FECHA) = 4
UNION
select 'JUEVES' AS DIA,COUNT(*) AS NO_VENTAS FROM VENTA  WHERE DAYOFWEEK(FECHA) = 5
UNION
select 'VIERNES' AS DIA,COUNT(*) AS NO_VENTAS FROM VENTA  WHERE DAYOFWEEK(FECHA) = 6
UNION
select 'SABADO' AS DIA,COUNT(*) AS NO_VENTAS FROM VENTA  WHERE DAYOFWEEK(FECHA) = 7;$



DROP VIEW IF EXISTS REPORTEMEJORESCLIENTES;$

CREATE VIEW REPORTEMEJORESCLIENTES AS 
SELECT ROUND(SUM(V.TOTAL),2) AS TOTAL,(SELECT NOMBRE FROM CLIENTE WHERE NIT = V.CLIENTE_NIT) AS CLIENTE
FROM VENTA V
GROUP BY V.CLIENTE_NIT
ORDER BY TOTAL DESC
LIMIT 10;$



DROP VIEW IF EXISTS REPORTEESTADO;$

CREATE VIEW REPORTEESTADO AS 
SELECT 'VENTAS' AS DESCRIPCION,ROUND(SUM(TOTAL),2) AS TOTAL FROM VENTA
UNION
SELECT 'GASTOS' AS DESCRIPCION,ROUND(SUM(MONTO),2) AS TOTAL FROM GASTO
UNION
SELECT 'COMPRAS' AS DESCRIPCION,ROUND(SUM(TOTAL),2) AS TOTAL FROM COMPRA
UNION
SELECT 'MERMAS' AS DESCRIPCION,ROUND(SUM(VALORPERDIDA),2) AS TOTAL FROM MERMA
UNION
SELECT 'ESTADO FINANCIERO' AS DESCRIPCION,((SELECT ROUND(SUM(TOTAL),2) FROM VENTA)-(SELECT ROUND(SUM(TOTAL),2) FROM COMPRA)-(SELECT ROUND(SUM(MONTO),2) FROM GASTO)-(SELECT ROUND(SUM(VALORPERDIDA),2) FROM MERMA)) AS TOTAL FROM DUAL;$



DROP PROCEDURE IF EXISTS LLAMADAVISTA;$

CREATE PROCEDURE LLAMADAVISTA(IN OPCIONR INT)
BEGIN
	IF (OPCIONR = 1)THEN
		SELECT * FROM REPORTEESTADO;
    ELSEIF (OPCIONR = 2)THEN
		SELECT * FROM REPORTEMEJORESVENDEDORES;
	ELSEIF (OPCIONR = 3)THEN
		SELECT * FROM REPORTEVENTASPORDIA;
	ELSEIF (OPCIONR = 4)THEN
		SELECT * FROM REPORTEMEJORESCLIENTES;
    END IF;
END;$


-- ---------------------------------------------------------------------------FIN VISTAS------------------------------------------------------

